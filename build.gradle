def emptyProjects = ['modules', 'platform',]

configure(subprojects.findAll { project -> !emptyProjects.find {it == project.name}  }) {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'idea'

    group = 'org.riderzen.ogs'

    sourceCompatibility = '1.7'
    targetCompatibility = '1.7'

    jar.enabled = true
    compileJava.options.compilerArgs << "-Xlint:unchecked" << "-Werror"

    repositories {
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        maven { url 'http://clojars.org/repo' }
        mavenCentral()
    }

    configurations {
        provided
    }

    sourceSets {
        main {
            compileClasspath = compileClasspath + configurations.provided
        }
    }

    dependencies {
        compile "org.vert-x:vertx-core:$vertxVsn"
        compile "org.vert-x:vertx-platform:$vertxVsn"
        compile "org.vert-x:vertx-lang-java:$vertxVsn"
        compile "org.vert-x:vertx-lang-groovy:$vertxVsn"
        compile "org.vert-x:vertx-lang-rhino:$vertxVsn"
        compile "org.mozilla:rhino:$rhinoVsn"

        groovy "org.codehaus.groovy:groovy:$groovyVsn"
        compile "org.codehaus.groovy:groovy-sql:$groovyVsn"

        compile "org.msgpack:msgpack:$msgpackVsn"
        compile "org.slf4j:slf4j-log4j12:$slf4jVsn"
        compile "log4j:log4j:$log4jVsn"
        compile "com.google.code.gson:gson:$gsonVsn"

        testCompile "junit:junit:$junitVsn"
        testCompile "org.vert-x:vertx-junit-annotations:$junitAnnoVsn"
    }


    task collectDeps(type: Copy) {
        destinationDir = file("build/deps")
        into("compile") {
            from configurations.compile
        }
        into("test") {
            from configurations.testCompile
        }
    }

    task copyMod(type: Copy, dependsOn: 'classes') {
        into "build/mod/$modulename-v$version"
        from 'build/classes/main'
        from 'src/main/resources'
        from 'src/main/scripts'
        into('lib') {
            from configurations.compile
            exclude { jar -> jar.file.name.startsWith('groovy') || jar.file.name.startsWith('vertx') }
        }
    }

    // Package into build/libs/mod.zip
    task dist(type: Zip, dependsOn: 'copyMod') {
        destinationDir = project.file('build/libs')
        archiveName = "$modulename-v${version}.zip"
        from project.file("build/mod")
    }

    task prepareVertxTest(type: Sync, dependsOn: 'copyMod') {
        from 'build/mod'
        into 'build/tmp/mod-test'
    }

    test {
        // Can't have the app on the vert.x classpath
        classpath = files(classpath.findAll {
            !(it.toString() ==~ /.+build\/(classes|resources)\/main$/)
        })

        // Some vert.x properties
        systemProperty 'vertx.test.timeout', 15
        systemProperty 'vertx.mods', "$projectDir/build/tmp/mod-test"
        systemProperty 'vertx.version', "$project.version"

        // Show output
        testLogging.showStandardStreams = true

        // No idea why we need to depend on testClasses...
        dependsOn << ['testClasses', 'copyMod', 'prepareVertxTest']
    }
}

configure(subprojects.findAll { project -> project.path != ':platform:common' && !emptyProjects.find { it == project.name}}) {
    dependencies {
        compile project(':platform:common')
    }
}
